package br.inpe.cocte.labac.hrise.reinforcement;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Stream;
import java.util.Map.Entry;





//import br.inpe.cocte.labac.hhost.reinforcement.LQValue;
//import br.inpe.cocte.labac.hhost.reinforcement.MoveAcceptanceMethods;

public class BalancedExploitationExploration {
	
	
	    /* 
	     * This controls if an LLH should not be executed anymore. Unless the number of remaining LLHs is less than 2, hence it can be executed again.
	     */
		private Map<String, Integer> notImproveLLH;
		/*
		 * This counts the number of times an LLH is selected to run.
		 */
		private  Map<String, Integer> freq;
		/*
		 * This counts the number of times an LLH, which was selected to run, has a population accepted.
		 */
		private  Map<String, Integer> acc;
		
		//private  Map<String, Integer> lastDPNo;
		//List<Integer> lastNS;
		//List<Integer> lastIB;
		//List<Integer> lastSP;
		
		private Map<String, Boolean> enabledLLH; 
		
		//private List<String> definitelySelectedLLH;
		//private String prevPerf;
		private final int nspos = 0; 
		private final int ibpos = 1;
		private final int sppos = 2; 
		
		private boolean startOver;
		 
		//private String beforePrevLLH;
			
		private static BalancedExploitationExploration instance = null;
		protected BalancedExploitationExploration() { // here is what first initialization should be done
		      //System.out.println("Sempre?");
		   this.notImproveLLH = new LinkedHashMap<String, Integer>();
		   this.notImproveLLH.put("NSGAII", 0);
		   this.notImproveLLH.put("IBEA", 0);
		   this.notImproveLLH.put("SPEA2", 0);
		   
		   this.freq = new LinkedHashMap<String, Integer>();
		   this.freq.put("NSGAII", 0);
		   this.freq.put("IBEA", 0);
		   this.freq.put("SPEA2", 0);
		   
		   this.acc = new LinkedHashMap<String, Integer>();
		   this.acc.put("NSGAII", 0);
		   this.acc.put("IBEA", 0);
		   this.acc.put("SPEA2", 0);
		   
		   //this.lastNS = new ArrayList<Integer>();
		   //this.lastIB = new ArrayList<Integer>();
		   //this.lastSP = new ArrayList<Integer>();
		   
		   this.enabledLLH = new LinkedHashMap<String,Boolean>(); // n = number of LLHs; i = 2
		   this.enabledLLH.put("NSGAII", true);
		   this.enabledLLH.put("IBEA", true);
		   this.enabledLLH.put("SPEA2", true);
		   //this.prevPerf = " ";	 
		   //this.definitelySelectedLLH = new ArrayList<String>();	
		   this.startOver = false;
		   //this.beforePrevLLH = " ";
		}
		
		public static BalancedExploitationExploration getInstance() {
		    if(instance == null) {
		    	  //System.out.println("Dentro de inst!");
		         instance = new BalancedExploitationExploration();
		        
		    }
		      //System.out.println("Fora de inst!");
		    return instance;
		}  
       
		public String balExploitationExploration(String selectedLLH, Map<String, PrevPerformance> allPrevPerf, Map<String, Double> prevQualImprov) {
			 MoveAcceptanceMethods mvac = MoveAcceptanceMethods.getInstance();
			 List<LQValue> currentQualityAcc = mvac.getAllQuality();
			 boolean above;
			 //int index = -1;
			 int enLLHSize = 0;
			 int netaAcc = 2; // netaa
			 int netaReject = 2; // netar
			 int minLLH = 2;
			 String oneLLH = " ";
			 String otherLLH = " ";
			 String beforeLLH = selectedLLH;
			 startOver = false;
			 //String currList = " ";
			 
			 freq.put(beforeLLH, freq.get(beforeLLH) + 1);
			
			 switch(selectedLLH) {
	            case "NSGAII" :
	        	   //index = nspos;
	        	   oneLLH = "IBEA";
	        	   otherLLH = "SPEA2";
	        	break;
	            case "IBEA" :
		           //index = ibpos;
		           oneLLH = "NSGAII";
	        	   otherLLH = "SPEA2";
		        break;
	            case "SPEA2" :
		           //index = sppos;
		           oneLLH = "NSGAII";
	        	   otherLLH = "IBEA";
		        break;
		        default: 
		        	System.out.println("Invalid LLH");
			 } 	
              
			  above = aboveFrequency(freq.get(selectedLLH), netaAcc, selectedLLH, oneLLH, otherLLH, prevQualImprov);
			  for(Entry<String, PrevPerformance> epf : allPrevPerf.entrySet()){
		  			
				  if  (epf.getValue().getLLH().startsWith("NO")) {
					  notImproveLLH.put(epf.getValue().getLLH().substring(2), notImproveLLH.get(epf.getValue().getLLH().substring(2)) + 1);
				  }	  
				  
				  //System.out.println("------ NO IMPROVE - LLH: " + epf.getKey() + " - Count: " + epf.getValue());  	 
		  		  
			     
		  			/*if  ((allPrevPerf.get(selectedLLH).getLLH().startsWith("NO")) ) { // check previous
				 
				    notImproveLLH.put(allPrevPerf.get(selectedLLH).getLLH().substring(2), notImproveLLH.get(allPrevPerf.get(selectedLLH).getLLH().substring(2)) + 1);
				    
			      }*/
		      }
			  //for(Entry<String, Integer> elem : notImproveLLH.entrySet()){
		  		//	System.out.println("------ NO IMPROVE - LLH: " + elem.getKey() + " - Count: " + elem.getValue());  	 
		  		  //}
			  
			  for(Entry<String, Boolean> el : enabledLLH.entrySet()){
		  			//System.out.println("------ Enabled - LLH: " + el.getKey() + " - Boolean: " + el.getValue());
		  			if (el.getValue())
		  				enLLHSize++;
		  		  }
			  
              if (notImproveLLH.get(selectedLLH) > netaReject && enLLHSize > minLLH) {
            	  enabledLLH.put(selectedLLH, false);
            	  //notImproveLLH.put(selectedLLH, 0);
            	 //System.out.println("REJECT " + selectedLLH);
              }
              if (above || allPrevPerf.get(selectedLLH).getLLH().equals("NO"+selectedLLH)  || !(enabledLLH.get(selectedLLH)) ) { // Main IF
            	    
                	if (mvac.getAllQualitySize() > 0) {
                		//System.out.println("MORE THAN 0 - Above: " + above + " - Perf: " + allPrevPerf.get(selectedLLH).getLLH() + " - Enabled: " + enabledLLH.get(selectedLLH));
                		for (LQValue cacc: currentQualityAcc) {
                		    //String accLLH = qualityPopH.get(j);
                			acc.put(cacc.getLLH(), acc.get(cacc.getLLH()) + 1);
                		}
                			                		
                		if (acc.get(oneLLH) > acc.get(otherLLH)) {
                			if ( (notImproveLLH.get(oneLLH) <= netaReject) && (enabledLLH.get(oneLLH)) ) {
                			  selectedLLH = oneLLH;
                			} else {
                				
                				selectedLLH = otherLLH;
                				enabledLLH.put(selectedLLH, true); // the best is to give it another chance
                			}
                			
                			//System.out.println(selectedLLH + " GREATER OR BEST FIRST *******************************************************");
                		} else if (acc.get(otherLLH) > acc.get(oneLLH)  ) {
                			        if ( (notImproveLLH.get(otherLLH) <= netaReject) && (enabledLLH.get(otherLLH)) ) {
                  			             selectedLLH = otherLLH;
                			        } else {
                  				       selectedLLH = oneLLH; 
                  				       enabledLLH.put(selectedLLH, true); // the best is to give it another chance
                			        }   
                			      //System.out.println(selectedLLH + " GREATER OR BEST SECOND *******************************************************");
                		    
                		} else { // they are equal
                			//System.out.println(oneLLH + " and " + otherLLH + "are EQUAL *******************************************************");
                			int newLLH = getRandomLLH(2);
                			if (newLLH == 0) { // oneLLH
                				 if ( (notImproveLLH.get(oneLLH) <= netaReject) && (enabledLLH.get(oneLLH)) ) {
              			             selectedLLH = oneLLH;
            			        } else {
              				       selectedLLH = otherLLH; 
              				       enabledLLH.put(selectedLLH, true); // the best is to give it another chance
            			        }   
                				//selectedLLH = oneLLH;
                			} else {// otherLLH
                				 if ( (notImproveLLH.get(otherLLH) <= netaReject) && (enabledLLH.get(otherLLH)) ) {
              			             selectedLLH = otherLLH;
            			        } else {
              				       selectedLLH = oneLLH; 
              				       enabledLLH.put(selectedLLH, true);
            			        }   
                		    }
                		 }	
                		
                	} else { // AccQuality is empty
                		int newLLH = getRandomLLH(2);
            			if (newLLH == 0) {
            				selectedLLH = oneLLH;
            			} else
            				selectedLLH = otherLLH;
                	}
                	
                	
                	//System.out.println("ACC Cnts - NSGA-II: " + acc.get("NSGAII") + " - IBEA: " + acc.get("IBEA") + " - SPEA2: " + acc.get("SPEA2"));
                	//System.out.println("FREQ Cnts BEFORE - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
                	
                	if (above) {
                	    freq.put(beforeLLH, 0);
                	} else {
                		 freq.put(beforeLLH, freq.get(beforeLLH) - 1);
                	}
                	
                	freq.put(selectedLLH, freq.get(selectedLLH) + 1);
                	acc.put("NSGAII", 0);
         		    acc.put("IBEA", 0);
         		    acc.put("SPEA2", 0);
         		   
         		    //System.out.println("FREQ Cnts AFTER - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
		            
              }    // Main IF
               
              //System.out.println("FREQ Cnts AFTER IF - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
			
              if ( (notImproveLLH.get("NSGAII") > netaReject) 
            		  && (notImproveLLH.get("IBEA") > netaReject)
            		  && (notImproveLLH.get("SPEA2") > netaReject)) { // start over because all are above limReject
            	  notImproveLLH.put("NSGAII", 0);
            	  notImproveLLH.put("IBEA", 0);
            	  notImproveLLH.put("SPEA2", 0);
            	  startOver = true;
            	  enabledLLH.put("NSGAII", true);
       		      enabledLLH.put("IBEA", true);
       		      enabledLLH.put("SPEA2", true);
            	  System.out.println("START OVER ------------------------------------");
              }
              
              //definitelySelectedLLH.add(selectedLLH);
              
			return selectedLLH;
		}
			 
		   private static int getRandomLLH(int high){
			    Random r = new Random();
			    int low = 0;
			    	//int high = 152;
			    int result = r.nextInt(high-low) + low;
			    return result;
			 }
				
			private static boolean aboveFrequency (double fr, int K, String selH, String oneH, String otherH, Map<String, Double> prevQI) {
				if ( (fr > K) && ( (prevQI.get(selH) < prevQI.get(oneH)) || (prevQI.get(selH) < prevQI.get(otherH)) ) ) {
					return true;
				} else {
					return false;
				}	
			}	 
			
			public boolean getStartOver() {
				return this.startOver;
			}
			
			public void setNotImproveLLH(String l, int v) {
				this.notImproveLLH.put(l, v);
			}
			
			public int getNotImproveLLH(String l) {
				return this.notImproveLLH.get(l);
			}
			
			private <K, V> Stream<K> keys(Map<K, V> map, V value) {
			    return map
			      .entrySet()
			      .stream()
			      .filter(entry -> value.equals(entry.getValue()))
			      .map(Map.Entry::getKey);
			}
			
			public void initialiseAllDataBalanced() {
				 this.notImproveLLH.put("NSGAII", 0);
				 this.notImproveLLH.put("IBEA", 0);
				 this.notImproveLLH.put("SPEA2", 0);
				 
				 this.freq.put("NSGAII", 0);
				 this.freq.put("IBEA", 0);
				 this.freq.put("SPEA2", 0);
				 
				 this.acc.put("NSGAII", 0);
				 this.acc.put("IBEA", 0);
				 this.acc.put("SPEA2", 0);
				 
				 this.enabledLLH.put("NSGAII", true);
				 this.enabledLLH.put("IBEA", true);
				 this.enabledLLH.put("SPEA2", true);
				 
				 this.startOver = false;
				//return this.startOver;
			}
			
			
			
			public String balExploitationExplorationNetaAcc(String selectedLLH, Map<String, PrevPerformance> allPrevPerf, int nacc, Map<String, Double> prevQualImprov) {
				 MoveAcceptanceMethods mvac = MoveAcceptanceMethods.getInstance();
				 List<LQValue> currentQualityAcc = mvac.getAllQuality();
				 boolean above;
				 //int index = -1;
				 int enLLHSize = 0;
				 int netaAcc = nacc; // netaa
				 int netaReject; // netar
				 if (netaAcc > 2) {
					 netaReject = netaAcc - 2;
					 //netaReject = 2;
				 } else {
					 netaReject = netaAcc;
				 }	 
				 //System.out.println("Neta A: " + netaAcc + " and Neta R: " + netaReject);
				 
				 int minLLH = 2;
				 String oneLLH = " ";
				 String otherLLH = " ";
				 String beforeLLH = selectedLLH;
				 startOver = false;
				 //String currList = " ";
				 
				 freq.put(beforeLLH, freq.get(beforeLLH) + 1);
				
				 switch(selectedLLH) {
		            case "NSGAII" :
		        	   //index = nspos;
		        	   oneLLH = "IBEA";
		        	   otherLLH = "SPEA2";
		        	break;
		            case "IBEA" :
			           //index = ibpos;
			           oneLLH = "NSGAII";
		        	   otherLLH = "SPEA2";
			        break;
		            case "SPEA2" :
			           //index = sppos;
			           oneLLH = "NSGAII";
		        	   otherLLH = "IBEA";
			        break;
			        default: 
			        	System.out.println("Invalid LLH");
				 } 	
	              
				  above = aboveFrequency(freq.get(selectedLLH), netaAcc, selectedLLH, oneLLH, otherLLH, prevQualImprov);
				  for(Entry<String, PrevPerformance> epf : allPrevPerf.entrySet()){
			  			
					  if  (epf.getValue().getLLH().startsWith("NO")) {
						  notImproveLLH.put(epf.getValue().getLLH().substring(2), notImproveLLH.get(epf.getValue().getLLH().substring(2)) + 1);
					  }	  
					  
					  //System.out.println("------ NO IMPROVE - LLH: " + epf.getKey() + " - Count: " + epf.getValue());  	 
			  		  
				     
			  			/*if  ((allPrevPerf.get(selectedLLH).getLLH().startsWith("NO")) ) { // check previous
					 
					    notImproveLLH.put(allPrevPerf.get(selectedLLH).getLLH().substring(2), notImproveLLH.get(allPrevPerf.get(selectedLLH).getLLH().substring(2)) + 1);
					    
				      }*/
			      }
				  //for(Entry<String, Integer> elem : notImproveLLH.entrySet()){
			  		//	System.out.println("------ NO IMPROVE - LLH: " + elem.getKey() + " - Count: " + elem.getValue());  	 
			  		  //}
				  
				  for(Entry<String, Boolean> el : enabledLLH.entrySet()){
			  			//System.out.println("------ Enabled - LLH: " + el.getKey() + " - Boolean: " + el.getValue());
			  			if (el.getValue())
			  				enLLHSize++;
			  		  }
				  
	              if (notImproveLLH.get(selectedLLH) > netaReject && enLLHSize > minLLH) {
	            	  enabledLLH.put(selectedLLH, false);
	            	  //notImproveLLH.put(selectedLLH, 0);
	            	 //System.out.println("REJECT " + selectedLLH);
	              }
	              if (above || allPrevPerf.get(selectedLLH).getLLH().equals("NO"+selectedLLH)  || !(enabledLLH.get(selectedLLH)) ) { // Main IF
	            	    
	                	if (mvac.getAllQualitySize() > 0) {
	                		//System.out.println("MORE THAN 0 - Above: " + above + " - Perf: " + allPrevPerf.get(selectedLLH).getLLH() + " - Enabled: " + enabledLLH.get(selectedLLH));
	                		for (LQValue cacc: currentQualityAcc) {
	                		    //String accLLH = qualityPopH.get(j);
	                			acc.put(cacc.getLLH(), acc.get(cacc.getLLH()) + 1);
	                		}
	                			                		
	                		if (acc.get(oneLLH) > acc.get(otherLLH)) {
	                			if ( (notImproveLLH.get(oneLLH) <= netaReject) && (enabledLLH.get(oneLLH)) ) {
	                			  selectedLLH = oneLLH;
	                			} else {
	                				
	                				selectedLLH = otherLLH;
	                				enabledLLH.put(selectedLLH, true); // the best is to give it another chance
	                			}
	                			
	                			//System.out.println(selectedLLH + " GREATER OR BEST FIRST *******************************************************");
	                		} else if (acc.get(otherLLH) > acc.get(oneLLH)  ) {
	                			        if ( (notImproveLLH.get(otherLLH) <= netaReject) && (enabledLLH.get(otherLLH)) ) {
	                  			             selectedLLH = otherLLH;
	                			        } else {
	                  				       selectedLLH = oneLLH; 
	                  				       enabledLLH.put(selectedLLH, true); // the best is to give it another chance
	                			        }   
	                			      //System.out.println(selectedLLH + " GREATER OR BEST SECOND *******************************************************");
	                		    
	                		} else { // they are equal
	                			//System.out.println(oneLLH + " and " + otherLLH + "are EQUAL *******************************************************");
	                			int newLLH = getRandomLLH(2);
	                			if (newLLH == 0) { // oneLLH
	                				 if ( (notImproveLLH.get(oneLLH) <= netaReject) && (enabledLLH.get(oneLLH)) ) {
	              			             selectedLLH = oneLLH;
	            			        } else {
	              				       selectedLLH = otherLLH; 
	              				       enabledLLH.put(selectedLLH, true); // the best is to give it another chance
	            			        }   
	                				//selectedLLH = oneLLH;
	                			} else {// otherLLH
	                				 if ( (notImproveLLH.get(otherLLH) <= netaReject) && (enabledLLH.get(otherLLH)) ) {
	              			             selectedLLH = otherLLH;
	            			        } else {
	              				       selectedLLH = oneLLH; 
	              				       enabledLLH.put(selectedLLH, true);
	            			        }   
	                		    }
	                		 }	
	                		
	                	} else { // AccQuality is empty
	                		int newLLH = getRandomLLH(2);
	            			if (newLLH == 0) {
	            				selectedLLH = oneLLH;
	            			} else
	            				selectedLLH = otherLLH;
	                	}
	                	
	                	
	                	//System.out.println("ACC Cnts - NSGA-II: " + acc.get("NSGAII") + " - IBEA: " + acc.get("IBEA") + " - SPEA2: " + acc.get("SPEA2"));
	                	//System.out.println("FREQ Cnts BEFORE - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
	                	
	                	if (above) {
	                	    freq.put(beforeLLH, 0);
	                	} else {
	                		 freq.put(beforeLLH, freq.get(beforeLLH) - 1);
	                	}
	                	
	                	freq.put(selectedLLH, freq.get(selectedLLH) + 1);
	                	acc.put("NSGAII", 0);
	         		    acc.put("IBEA", 0);
	         		    acc.put("SPEA2", 0);
	         		   
	         		    //System.out.println("FREQ Cnts AFTER - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
			            
	              }    // Main IF
	               
	              //System.out.println("FREQ Cnts AFTER IF - NSGA-II: " + freq.get("NSGAII") + " - IBEA: " + freq.get("IBEA") + " - SPEA2: " + freq.get("SPEA2"));
				
	              if ( (notImproveLLH.get("NSGAII") > netaReject) 
	            		  && (notImproveLLH.get("IBEA") > netaReject)
	            		  && (notImproveLLH.get("SPEA2") > netaReject)) { // start over because all are above limReject
	            	  notImproveLLH.put("NSGAII", 0);
	            	  notImproveLLH.put("IBEA", 0);
	            	  notImproveLLH.put("SPEA2", 0);
	            	  startOver = true;
	            	  enabledLLH.put("NSGAII", true);
	       		      enabledLLH.put("IBEA", true);
	       		      enabledLLH.put("SPEA2", true);
	            	  System.out.println("START OVER ------------------------------------");
	              }
	              
	              //definitelySelectedLLH.add(selectedLLH);
	              
				return selectedLLH;
			}
			
			
}
